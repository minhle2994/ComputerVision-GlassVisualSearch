package minhle.com.demoglass;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.media.AudioManager;
import android.os.Bundle;
import android.os.FileObserver;
import android.os.StrictMode;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;

import com.google.android.glass.app.Card;
import com.google.android.glass.media.Sounds;
import com.google.android.glass.touchpad.Gesture;
import com.google.android.glass.touchpad.GestureDetector;
import com.google.android.glass.widget.CardBuilder;
import com.google.android.glass.widget.CardScrollAdapter;
import com.google.android.glass.widget.CardScrollView;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.loopj.android.http.AsyncHttpClient;
import com.loopj.android.http.JsonHttpResponseHandler;
import com.loopj.android.http.RequestParams;

import org.json.JSONException;

import java.io.File;
import java.io.FileNotFoundException;

/**
 * An {@link Activity} showing a tuggable "Hello World!" card.
 * <p/>
 * The main content view is composed of a one-card {@link CardScrollView} that provides tugging
 * feedback to the user when swipe gestures are detected.
 * If your Glassware intends to intercept swipe gestures, you should set the content view directly
 * and use a {@link com.google.android.glass.touchpad.GestureDetector}.
 *
 * @see <a href="https://developers.google.com/glass/develop/gdk/touch">GDK Developer Guide</a>
 */
public class ShowActivity extends Activity {
    private static final String API_KEY = "cNSiII2zZzS_TC9D2D0ZVw";
    static final HttpTransport HTTP_TRANSPORT = new NetHttpTransport();
    static final JsonFactory JSON_FACTORY = new JacksonFactory();

    /**
     * {@link CardScrollView} to use as the main content view.
     */
    private CardScrollView mCardScroller;
    private String mPath;
    private String mName = "Wait....";
    private GestureDetector mGestureDetector;

    /**
     * "Hello World!" {@link View} generated by {@link #buildView()}.
     */
    Bitmap resized;
    private View mView;
    @Override
    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        mGestureDetector = createGestureDetector(this);

        StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
        StrictMode.setThreadPolicy(policy);
        mPath = getIntent().getStringExtra("PATH");
        processPictureWhenReady(mPath);



        mView = buildView();
        mCardScroller = new CardScrollView(this);
        mCardScroller.setAdapter(new CardScrollAdapter() {
            @Override
            public int getCount() {
                return 1;
            }
            @Override
            public Object getItem(int position) {
                return mView;
            }
            @Override
            public View getView(int position, View convertView, ViewGroup parent) {
                return mView;
            }
            @Override
            public int getPosition(Object item) {
                if (mView.equals(item)) {
                    return 0;
                }
                return AdapterView.INVALID_POSITION;
            }
        });
        // Handle the TAP event.
        mCardScroller.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                // Plays disallowed sound to indicate that TAP actions are not supported.
                AudioManager am = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
                am.playSoundEffect(Sounds.DISALLOWED);
            }
        });
        setContentView(mCardScroller);

    }
    @Override
    protected void onResume() {
        super.onResume();
        mCardScroller.activate();
    }
    @Override
    protected void onPause() {
        mCardScroller.deactivate();
        super.onPause();
    }

    /**
     * Builds a Glass styled "Hello World!" view using the {@link CardBuilder} class.
     */
    private View buildView() {
        Card card = new Card(this);
        if (resized!=null){
            card.setImageLayout(Card.ImageLayout.FULL);
            card.addImage(resized);
        }

        card.setText(mName);
        card.setFootnote("tap to back");
        return card.getView();
    }

    public Bitmap imageResize(Bitmap bitmap,int newWidth,int newHeight) {
        Bitmap scaledBitmap = Bitmap.createBitmap(newWidth, newHeight, Bitmap.Config.ARGB_8888);

        float ratioX = newWidth / (float) bitmap.getWidth();
        float ratioY = newHeight / (float) bitmap.getHeight();
        float middleX = newWidth / 2.0f;
        float middleY = newHeight / 2.0f;

        Matrix scaleMatrix = new Matrix();
        scaleMatrix.setScale(ratioX, ratioY, middleX, middleY);

        Canvas canvas = new Canvas(scaledBitmap);
        canvas.setMatrix(scaleMatrix);
        canvas.drawBitmap(bitmap, middleX - bitmap.getWidth() / 2, middleY - bitmap.getHeight() / 2, new Paint(Paint.FILTER_BITMAP_FLAG));

        return scaledBitmap;
    }

    public void uploadImage(File image){
        RequestParams params = new RequestParams();
        String url;
        try {
            params.put("image_request[image]", image);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }

        params.put("image_request[locale]", "vi-VN");
        Log.e("Upload image: ", image.getAbsolutePath());
        final AsyncHttpClient client = new AsyncHttpClient();
        client.setTimeout(500000);
//        client.setConnectTimeout(500000);
//        client.setResponseTimeout(10000);
        client.addHeader("Authorization", "CloudSight cNSiII2zZzS_TC9D2D0ZVw");
        client.post("https://api.cloudsightapi.com/image_requests", params, new JsonHttpResponseHandler() {
            @Override
            public void onSuccess(int statusCode, cz.msebera.android.httpclient.Header[] headers,
                                  org.json.JSONObject response) {
                Log.e("RESPONSE: ", response.toString());

                try {
                    Thread.sleep(10000);
                    String token = response.getString("token");
                    Log.e("TOKEN STR: ", token);

                    AsyncHttpClient client_get = new AsyncHttpClient();
                    client_get.setTimeout(500000);
                    client_get.addHeader("Authorization", "CloudSight cNSiII2zZzS_TC9D2D0ZVw");
                    client_get.get("http://api.cloudsightapi.com/image_responses/" + token, null, new JsonHttpResponseHandler() {
                        @Override
                        public void onSuccess(int statusCode, cz.msebera.android.httpclient.Header[] headers,
                                              org.json.JSONObject response) {
                            Log.e("RESPONSE: ", response.toString());

                            try {
//                                String result = response.getString("name");
                                String status = response.getString("status");
                                if (status.equals("completed")) {
                                    String name = response.getString("name");
                                    mName = response.getString("name");
                                } else {
                                    mName = "Can not recognize. Please try again";
                                }
                                mView = buildView();
                                mCardScroller.getAdapter().notifyDataSetChanged();
                                Log.e("STATUS: ", status);

                            } catch (JSONException e) {
                                e.printStackTrace();
                            }
                        }

                        @Override
                        public void onFailure(int statusCode,
                                              cz.msebera.android.httpclient.Header[] headers,
                                              java.lang.Throwable throwable,
                                              org.json.JSONObject errorResponse) {
                            // called when response HTTP status is "4XX" (eg. 401, 403, 404)
                            Log.e("Error: ", Integer.toString(statusCode));
                        }
                    });
                } catch (JSONException e) {
                    e.printStackTrace();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }

            @Override
            public void onFailure(int statusCode,
                                  cz.msebera.android.httpclient.Header[] headers,
                                  java.lang.Throwable throwable,
                                  org.json.JSONObject errorResponse) {
                // called when response HTTP status is "4XX" (eg. 401, 403, 404)
                Log.e("Error: ", Integer.toString(statusCode));
                Log.e("Error: ", errorResponse.toString());
            }

            public void onFailure(int statusCode, cz.msebera.android.httpclient.Header[] headers, String error, java.lang.Throwable throwable) {
                Log.e("Error: ", Integer.toString(statusCode));
                Log.e("Error: ", error);
            }
        });
    }
    @Override
    public void onBackPressed() {
        moveTaskToBack(true);
    }

    /**
     * Process picture - from example GDK
     *
     * @param picturePath
     */
    private void processPictureWhenReady(final String picturePath) {
        final File pictureFile = new File(picturePath);
        if (pictureFile.exists()) {
            Log.e("FILE EXIST", picturePath);
            // The picture is ready; process it.
            uploadImage(pictureFile);
            BitmapFactory.Options options = new BitmapFactory.Options();
            options.inPreferredConfig = Bitmap.Config.ARGB_8888;
            Bitmap bitmap = BitmapFactory.decodeFile(mPath, options);
            resized = bitmap;

//            resized = imageResize(bitmap, bitmap.getWidth() / 4, bitmap.getHeight() / 4);
//            OutputStream stream = null;
//            try {
//                String path = Environment.getExternalStorageDirectory().getAbsolutePath();
//                File file = new File(path, "resized.jpg");
//                if (file.exists())
//                    file.delete();
//                stream = new FileOutputStream(file);
//                resized.compress(Bitmap.CompressFormat.JPEG, 100, stream);
//                stream.flush();
//                stream.close();
//                uploadImage(file);
//            } catch (FileNotFoundException e) {
//                e.printStackTrace();
//            } catch (IOException e) {
//                e.printStackTrace();
//            }

        } else {
            // The file does not exist yet. Before starting the file observer, you
            // can update your UI to let the user know that the application is
            // waiting for the picture (for example, by displaying the thumbnail
            // image and a progress indicator).

            final File parentDirectory = pictureFile.getParentFile();
            FileObserver observer = new FileObserver(parentDirectory.getPath(),
                    FileObserver.CLOSE_WRITE | FileObserver.MOVED_TO) {
                // Protect against additional pending events after CLOSE_WRITE
                // or MOVED_TO is handled.
                private boolean isFileWritten;

                @Override
                public void onEvent(int event, String path) {
                    if (!isFileWritten) {
                        // For safety, make sure that the file that was created in
                        // the directory is actually the one that we're expecting.
                        File affectedFile = new File(parentDirectory, path);
                        isFileWritten = affectedFile.equals(pictureFile);

                        if (isFileWritten) {
                            stopWatching();

                            // Now that the file is ready, recursively call
                            // processPictureWhenReady again (on the UI thread).
                            runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    processPictureWhenReady(picturePath);
                                }
                            });
                        }
                    }
                }
            };
            observer.startWatching();
        }
    }

    private GestureDetector createGestureDetector(Context context) {
        GestureDetector gestureDetector = new GestureDetector(context);
        //Create a base listener for generic gestures
        gestureDetector.setBaseListener(new GestureDetector.BaseListener() {
            @Override
            public boolean onGesture(Gesture gesture) {
                Log.e("ShowActivity", gesture.name());
                if (gesture == Gesture.LONG_PRESS) {
                    Intent intent = new Intent(getApplicationContext(), MainActivity.class);
                    startActivity(intent);
                    //finish();
                    return true;
                } else if (gesture == Gesture.TWO_TAP) {
                    // do something on two finger tap
                    return true;
                } else if (gesture == Gesture.SWIPE_RIGHT) {
                    // do something on right (forward) swipe
                    return true;
                } else if (gesture == Gesture.SWIPE_LEFT) {
                    // do something on left (backwards) swipe
                    return true;
                }
                return false;
            }
        });

        return gestureDetector;
    }

    /*
     * Send generic motion events to the gesture detector
     */
    @Override
    public boolean onGenericMotionEvent(MotionEvent event) {
        if (mGestureDetector != null) {
            return mGestureDetector.onMotionEvent(event);
        }
        return false;
    }
}